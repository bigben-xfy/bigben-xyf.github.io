(window.webpackJsonp=window.webpackJsonp||[]).push([[586],{1260:function(e,t,v){"use strict";v.r(t);var _=v(92),d=Object(_.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("div",[v("h2",[e._v("API")]),e._v(" "),v("h3",[e._v("Tree props")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Property")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Default")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("treeData")]),e._v(" "),v("td",[e._v("treeNode of tree, please use "),v("code",{pre:!0},[e._v("treeNodes")]),e._v(" before v1.1.4")]),e._v(" "),v("td",[e._v("array")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("replaceFields")]),e._v(" "),v("td",[e._v("Replace the title,key and children fields in treeNode with the corresponding fields in treeData")]),e._v(" "),v("td",[e._v("object")]),e._v(" "),v("td",[e._v("{ children:'children', title:'title', key:'key' }")])]),e._v(" "),v("tr",[v("td",[e._v("autoExpandParent")]),e._v(" "),v("td",[e._v("Whether to automatically expand a parent treeNode")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("true")])]),e._v(" "),v("tr",[v("td",[e._v("checkable")]),e._v(" "),v("td",[e._v("Adds a "),v("code",{pre:!0},[e._v("Checkbox")]),e._v(" before the treeNodes")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("checkedKeys(v-model)")]),e._v(" "),v("td",[e._v("(Controlled) Specifies the keys of the checked treeNodes (PS: When this specifies the key of a treeNode which is also a parent treeNode, all the children treeNodes of will be checked; and vice versa, when it specifies the key of a treeNode which is a child treeNode, its parent treeNode will also be checked. When "),v("code",{pre:!0},[e._v("checkable")]),e._v(" and "),v("code",{pre:!0},[e._v("checkStrictly")]),e._v(" is true, its object has "),v("code",{pre:!0},[e._v("checked")]),e._v(" and "),v("code",{pre:!0},[e._v("halfChecked")]),e._v(" property. Regardless of whether the child or parent treeNode is checked, they won't impact each other.")]),e._v(" "),v("td",[e._v("string[] | number[] | {checked: string[] | number[], halfChecked: string[] | number[]}")]),e._v(" "),v("td",[e._v("[]")])]),e._v(" "),v("tr",[v("td",[e._v("checkStrictly")]),e._v(" "),v("td",[e._v("Check treeNode precisely; parent treeNode and children treeNodes are not associated")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("defaultCheckedKeys")]),e._v(" "),v("td",[e._v("Specifies the keys of the default checked treeNodes")]),e._v(" "),v("td",[e._v("string[] | number[]")]),e._v(" "),v("td",[e._v("[]")])]),e._v(" "),v("tr",[v("td",[e._v("defaultExpandAll")]),e._v(" "),v("td",[e._v("Whether to expand all treeNodes by default")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("defaultExpandedKeys")]),e._v(" "),v("td",[e._v("Specify the keys of the default expanded treeNodes")]),e._v(" "),v("td",[e._v("string[] | number[]")]),e._v(" "),v("td",[e._v("[]")])]),e._v(" "),v("tr",[v("td",[e._v("defaultExpandParent")]),e._v(" "),v("td",[e._v("auto expand parent treeNodes when init")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("true")])]),e._v(" "),v("tr",[v("td",[e._v("defaultSelectedKeys")]),e._v(" "),v("td",[e._v("Specifies the keys of the default selected treeNodes")]),e._v(" "),v("td",[e._v("string[] | number[]")]),e._v(" "),v("td",[e._v("[]")])]),e._v(" "),v("tr",[v("td",[e._v("disabled")]),e._v(" "),v("td",[e._v("whether disabled the tree")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("draggable")]),e._v(" "),v("td",[e._v("Specifies whether this Tree is draggable (IE > 8)")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("expandedKeys(.sync)")]),e._v(" "),v("td",[e._v("(Controlled) Specifies the keys of the expanded treeNodes")]),e._v(" "),v("td",[e._v("string[] | number[]")]),e._v(" "),v("td",[e._v("[]")])]),e._v(" "),v("tr",[v("td",[e._v("filterTreeNode")]),e._v(" "),v("td",[e._v("Defines a function to filter (highlight) treeNodes. When the function returns "),v("code",{pre:!0},[e._v("true")]),e._v(", the corresponding treeNode will be highlighted")]),e._v(" "),v("td",[e._v("function(node)")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("loadData")]),e._v(" "),v("td",[e._v("Load data asynchronously")]),e._v(" "),v("td",[e._v("function(node)")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("loadedKeys")]),e._v(" "),v("td",[e._v("(Controlled) Set loaded tree nodes. Need work with "),v("code",{pre:!0},[e._v("loadData")])]),e._v(" "),v("td",[e._v("string[] | number[]")]),e._v(" "),v("td",[e._v("[]")])]),e._v(" "),v("tr",[v("td",[e._v("multiple")]),e._v(" "),v("td",[e._v("Allows selecting multiple treeNodes")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("selectedKeys(.sync)")]),e._v(" "),v("td",[e._v("(Controlled) Specifies the keys of the selected treeNodes")]),e._v(" "),v("td",[e._v("string[] | number[]")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("showIcon")]),e._v(" "),v("td",[e._v("Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to "),v("code",{pre:!0},[e._v("true")])]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("switcherIcon")]),e._v(" "),v("td",[e._v("customize collapse/expand icon of tree node")]),e._v(" "),v("td",[e._v("slot")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("showLine")]),e._v(" "),v("td",[e._v("Shows a connecting line")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])])])]),e._v(" "),v("h3",[e._v("Events")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Events Name")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Arguments")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("check")]),e._v(" "),v("td",[e._v("Callback function for when the onCheck event occurs")]),e._v(" "),v("td",[e._v("function(checkedKeys, e:{checked: bool, checkedNodes, node, event})")])]),e._v(" "),v("tr",[v("td",[e._v("dragend")]),e._v(" "),v("td",[e._v("Callback function for when the onDragEnd event occurs")]),e._v(" "),v("td",[e._v("function({event, node})")])]),e._v(" "),v("tr",[v("td",[e._v("dragenter")]),e._v(" "),v("td",[e._v("Callback function for when the onDragEnter event occurs")]),e._v(" "),v("td",[e._v("function({event, node, expandedKeys})")])]),e._v(" "),v("tr",[v("td",[e._v("dragleave")]),e._v(" "),v("td",[e._v("Callback function for when the onDragLeave event occurs")]),e._v(" "),v("td",[e._v("function({event, node})")])]),e._v(" "),v("tr",[v("td",[e._v("dragover")]),e._v(" "),v("td",[e._v("Callback function for when the onDragOver event occurs")]),e._v(" "),v("td",[e._v("function({event, node})")])]),e._v(" "),v("tr",[v("td",[e._v("dragstart")]),e._v(" "),v("td",[e._v("Callback function for when the onDragStart event occurs")]),e._v(" "),v("td",[e._v("function({event, node})")])]),e._v(" "),v("tr",[v("td",[e._v("drop")]),e._v(" "),v("td",[e._v("Callback function for when the onDrop event occurs")]),e._v(" "),v("td",[e._v("function({event, node, dragNode, dragNodesKeys})")])]),e._v(" "),v("tr",[v("td",[e._v("expand")]),e._v(" "),v("td",[e._v("Callback function for when a treeNode is expanded or collapsed")]),e._v(" "),v("td",[e._v("function(expandedKeys, {expanded: bool, node})")])]),e._v(" "),v("tr",[v("td",[e._v("load")]),e._v(" "),v("td",[e._v("Callback function for when a treeNode is loaded")]),e._v(" "),v("td",[e._v("function(loadedKeys, {event, node})")])]),e._v(" "),v("tr",[v("td",[e._v("rightClick")]),e._v(" "),v("td",[e._v("Callback function for when the user right clicks a treeNode")]),e._v(" "),v("td",[e._v("function({event, node})")])]),e._v(" "),v("tr",[v("td",[e._v("select")]),e._v(" "),v("td",[e._v("Callback function for when the user clicks a treeNode")]),e._v(" "),v("td",[e._v("function(selectedKeys, e:{selected: bool, selectedNodes, node, event})")])])])]),e._v(" "),v("h3",[e._v("TreeNode props")]),e._v(" "),v("p",[e._v("One of the Tree "),v("code",{pre:!0},[e._v("treeNode")]),e._v(" prop for describing the tree's node, TreeNode has the same API.")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Property")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Default")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("class")]),e._v(" "),v("td",[e._v("className")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("style")]),e._v(" "),v("td",[e._v("style")]),e._v(" "),v("td",[e._v("string|object")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("disableCheckbox")]),e._v(" "),v("td",[e._v("Disables the checkbox of the treeNode")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("disabled")]),e._v(" "),v("td",[e._v("Disables the treeNode")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("icon")]),e._v(" "),v("td",[e._v("customize icon. When you pass component, whose render will receive full TreeNode props as component props")]),e._v(" "),v("td",[e._v("slot|slot-scope")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("isLeaf")]),e._v(" "),v("td",[e._v("Determines if this is a leaf node(effective when "),v("code",{pre:!0},[e._v("loadData")]),e._v(" is specified)")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("false")])]),e._v(" "),v("tr",[v("td",[e._v("key")]),e._v(" "),v("td",[e._v("Used with (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys. P.S.: It must be unique in all of treeNodes of the tree!")]),e._v(" "),v("td",[e._v("string | number")]),e._v(" "),v("td",[e._v("internal calculated position of treeNode")])]),e._v(" "),v("tr",[v("td",[e._v("selectable")]),e._v(" "),v("td",[e._v("Set whether the treeNode can be selected")]),e._v(" "),v("td",[e._v("boolean")]),e._v(" "),v("td",[e._v("true")])]),e._v(" "),v("tr",[v("td",[e._v("title")]),e._v(" "),v("td",[e._v("Title")]),e._v(" "),v("td",[e._v("string|slot|slot-scope")]),e._v(" "),v("td",[e._v("'---'")])]),e._v(" "),v("tr",[v("td",[e._v("slots")]),e._v(" "),v("td",[e._v("When using treeNodes, you can use this property to configure the properties that support the slot, such as "),v("code",{pre:!0},[e._v("slots: { title: 'XXX'}")])]),e._v(" "),v("td",[e._v("object")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("scopedSlots")]),e._v(" "),v("td",[e._v("When using treeNodes, you can use this property to configure the properties that support the slot-scope, such as "),v("code",{pre:!0},[e._v("scopedSlots: { title: 'XXX'}")])]),e._v(" "),v("td",[e._v("object")]),e._v(" "),v("td",[e._v("-")])]),e._v(" "),v("tr",[v("td",[e._v("on")]),e._v(" "),v("td",[e._v("When using treeNodes, you can use this property to configure the events, such as "),v("code",{pre:!0},[e._v("on: { click: () => {}}")])]),e._v(" "),v("td",[e._v("object")]),e._v(" "),v("td",[e._v("-")])])])]),e._v(" "),v("h3",[e._v("DirectoryTree props")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Property")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Default")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("expandAction")]),e._v(" "),v("td",[e._v("Directory open logic, optional "),v("code",{pre:!0},[e._v("false")]),e._v(" "),v("code",{pre:!0},[e._v("'click'")]),e._v(" "),v("code",{pre:!0},[e._v("'dblclick'")])]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("click")])])])]),e._v(" "),v("h2",[e._v("FAQ")]),e._v(" "),v("h3",[e._v("How to hide file icon when use showLine?")]),e._v(" "),v("p",[e._v("File icon realize by using switcherIcon. You can overwrite the style to hide it")])])}],!1,null,null,null);t.default=d.exports}}]);